/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface;
import Business.Employee;
import Business.Patient;
import java.awt.CardLayout;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import javax.mail.Authenticator;
import java.util.ArrayList;
import java.util.List;
import javax.mail.*;
import javax.mail.internet.*;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;


/**
 *
 * @author Name
 */
public class DoctorsView extends javax.swing.JPanel {

    /**
     * Creates new form AdminView
     */
    private JPanel container;
    Employee employeeObject;

    DoctorsView(JPanel container, Employee employeeObject) {
        initComponents();
        this.container = container;
        this.employeeObject = employeeObject;
        sendEmail.setVisible(false);
        emailMessage.setVisible(false);

        populateData();
    }

    public void populateData() {
        List<Patient> list = new ArrayList<>();
        DefaultTableModel dm = (DefaultTableModel) patientsTable.getModel();
        dm.setRowCount(0);
        BufferedReader br;
        try {
            br = new BufferedReader(new FileReader("src/assests/patientRecord.csv"));
            String line;
            while ((line = br.readLine()) != null) {
                // use comma as separator
                String[] cols = line.split(",");
                System.out.println(cols[7]);
                if (cols[7].equals(employeeObject.getEmployeeDepartment())) {
                    Object[] row = new Object[7];
                    row[0] = cols[0] + " " + cols[1];
                    row[1] = cols[2];
                    row[2] = cols[5];
                    row[3] = cols[8];
                    dm.addRow(row);
                }
//              row[3] = cols[8];
//                Patient p = new Patient();
//                p.setPatientFName(cols[0]);
//                p.setPatientLName(cols[1]);
//                p.setDob(cols[4]);
//                p.setGender(cols[5]);
//                p.setStatus(cols[8]);
//                list.add(p);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(PatientRegistrationForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(PatientRegistrationForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        sort(dm);
    }

    private void sort(DefaultTableModel dm) {
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(dm);
        patientsTable.setRowSorter(sorter);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jColorChooser1 = new javax.swing.JColorChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        patientsTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        backjButton = new javax.swing.JButton();
        assignPatientToMe = new javax.swing.JButton();
        treatPatient = new javax.swing.JButton();
        emailMessage = new javax.swing.JTextField();
        sendEmail = new javax.swing.JButton();

        jColorChooser1.setBackground(new java.awt.Color(0, 153, 153));

        setBackground(new java.awt.Color(0, 153, 153));

        patientsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Patient Name", "User Name", "Sex", "Status"
            }
        ));
        jScrollPane1.setViewportView(patientsTable);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel1.setText("Hospital Patient List");

        backjButton.setText("<<Back");
        backjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backjButtonActionPerformed(evt);
            }
        });

        assignPatientToMe.setText("Assign");
        assignPatientToMe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignPatientToMeActionPerformed(evt);
            }
        });

        treatPatient.setText("Treat Patient");
        treatPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                treatPatientActionPerformed(evt);
            }
        });

        emailMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailMessageActionPerformed(evt);
            }
        });

        sendEmail.setText("sendEmail");
        sendEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendEmailActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(159, 159, 159))
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 631, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(backjButton)
                        .addGap(18, 18, 18)
                        .addComponent(assignPatientToMe, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(treatPatient)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(149, 149, 149)
                        .addComponent(emailMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(190, 190, 190)
                        .addComponent(sendEmail)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backjButton)
                    .addComponent(treatPatient)
                    .addComponent(assignPatientToMe))
                .addGap(18, 18, 18)
                .addComponent(emailMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(sendEmail)
                .addContainerGap(31, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backjButtonActionPerformed

        container.remove(this);
        CardLayout layout = (CardLayout) container.getLayout();
        layout.previous(container);
    }//GEN-LAST:event_backjButtonActionPerformed

    private void updateStatus(String status,String username){
        System.out.println(status);
        File inputFile = new File("src/assests/patientRecord.csv");
        BufferedReader br;
        FileOutputStream fos;
        List<String> csvContent = new ArrayList<>();
        try {
            br = new BufferedReader(new FileReader("src/assests/patientRecord.csv"));
            String line;
            String prevValue = "";
            while ((line = br.readLine()) != null) {
                // use comma as separator
                String[] cols = line.split(",");
                if(cols[2].equals(username)){
                     csvContent.add(cols[0]+","+cols[1]+","+cols[2]+","+cols[3]+","+cols[4]+","+cols[5]+","+cols[6]+","+cols[7]+","+status); 
                }
                else{
                    csvContent.add(cols[0]+","+cols[1]+","+cols[2]+","+cols[3]+","+cols[4]+","+cols[5]+","+cols[6]+","+cols[7]+","+cols[8]);
                }
               
//                fos = new FileOutputStream("src/assests/patientRecord.csv", true);
//                PrintWriter pw = new PrintWriter(fos);
//                for(int i=0;i<csvContent.size();i++){
//                    pw.append(csvContent.get(i));
//                }
//                pw.println();
//                pw.close();
            }
            System.out.println(csvContent);
            FileWriter fw = new FileWriter("src/assests/patientRecord.csv",false);
            fos = new FileOutputStream("src/assests/patientRecord.csv", true);
            PrintWriter pw = new PrintWriter(fos);
            for(int i=0;i<csvContent.size();i++){
                pw.append(csvContent.get(i));
                if(i<csvContent.size()-1){
                    pw.println();
                }
            }
            pw.println();
            pw.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(PatientRegistrationForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(PatientRegistrationForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }    
    private void assignPatientToMeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignPatientToMeActionPerformed
        int selectedRow = patientsTable.getSelectedRow();
        int selectedColumn = 3;
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row");
            return;
        } else {
            BufferedReader br;
            try {
                br = new BufferedReader(new FileReader("src/assests/patientRecord.csv"));
                String line;
                while ((line = br.readLine()) != null) {
                    // use comma as separator
                    String[] cols = line.split(",");
                    if (cols[2].equalsIgnoreCase((String) patientsTable.getValueAt(selectedRow, 1))) {
                        if (cols[8] != patientsTable.getValueAt(selectedRow, 3)) {
                            cols[8] = "Doctor Assigned";
                            updateStatus("Doctor Assigned", (String) patientsTable.getValueAt(selectedRow, 1));
                            patientsTable.setValueAt(cols[8], selectedRow, selectedColumn);
                        } else {
                            JOptionPane.showMessageDialog(null, "Patient has already been assigned to a doctor");
                        }
                        break;
                    }
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(PatientRegistrationForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(PatientRegistrationForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_assignPatientToMeActionPerformed

    private void treatPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_treatPatientActionPerformed
        int selectedRow = patientsTable.getSelectedRow();
        int selectedColumn = 3;
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row");
            return;
        } else {
            BufferedReader br;
            try {
                br = new BufferedReader(new FileReader("src/assests/patientRecord.csv"));
                String line;
                while ((line = br.readLine()) != null) {
                    // use comma as separator
                    String[] cols = line.split(",");
                    System.out.println(cols[2]);
                    if (cols[2].equalsIgnoreCase((String) patientsTable.getValueAt(selectedRow, 1))) {
                        if (cols[8] != patientsTable.getValueAt(selectedRow, 3)) {
                            cols[8] = "Treatment Completed";
                            updateStatus("Treatment Completed", (String) patientsTable.getValueAt(selectedRow, 1));
                            patientsTable.setValueAt(cols[8], selectedRow, selectedColumn);
                            emailPatientReport();
                        } else {
                            JOptionPane.showMessageDialog(null, "Patient treatment has been completed");
                        }
                        break;
                    }
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(PatientRegistrationForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(PatientRegistrationForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_treatPatientActionPerformed
    
      private void SendMail(String toMail, String text){
        String to = toMail;
        String from = "hospitalservice20@gmail.com";
        String host = "smtp.gmail.com";
        Properties properties = new Properties();

        // Setup mail server
        
        properties.put("mail.smtp.from", "hospitalservice20@gmail.com");
        properties.put("mail.smtp.host", host);
        properties.put("mai.smtp.auth", "true");
        properties.put("mail.smtp.starttls.enable", "true");
        properties.put("mail.smtp.port", "587");
        properties.setProperty("mail.smtp.user", from);
        properties.setProperty("mail.smtp.password", "Demo@123");
        properties.setProperty("mail.smtp.auth", "true");
        
         Session session = Session.getDefaultInstance(properties, new Authenticator() {
            protected PasswordAuthentication getPasswordAuthentication(){
                return new PasswordAuthentication("hospitalservice20@gmail.com", "Demo@123");
            }
        });
         
         try {
           // Create a default MimeMessage object.
           MimeMessage message = new MimeMessage(session);
           // Set From: header field of the header.
           message.setFrom(new InternetAddress(from));
           // Set To: header field of the header.
           message.addRecipient(Message.RecipientType.TO, new InternetAddress(to));
           // Set Subject: header field
           message.setSubject("Demo Report");

           // Send the actual HTML message, as big as you like
           message.setContent("<h1>"+text+"</h1>", "text/html");

           // Send message
           Transport.send(message);
           System.out.println("Sent message successfully....");
           JOptionPane.showMessageDialog(null, "Sent email to patient !!");
        } catch (MessagingException mex) {
           mex.printStackTrace();
        }
     }
    
    private void sendEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendEmailActionPerformed
        // TODO add your handling code here:
        String text = emailMessage.getText();
        int selectedRow = patientsTable.getSelectedRow();
        SendMail((String) patientsTable.getValueAt(selectedRow, 1),text);
    }//GEN-LAST:event_sendEmailActionPerformed

    private void emailMessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailMessageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emailMessageActionPerformed
    private void emailPatientReport() {
        int dialogButton = JOptionPane.showConfirmDialog(null, "Send report through Email?");
        if (dialogButton == JOptionPane.YES_OPTION) {
            sendEmail.setVisible(true);
            emailMessage.setVisible(true);
        } else {
            return;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignPatientToMe;
    private javax.swing.JButton backjButton;
    private javax.swing.JTextField emailMessage;
    private javax.swing.JColorChooser jColorChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable patientsTable;
    private javax.swing.JButton sendEmail;
    private javax.swing.JButton treatPatient;
    // End of variables declaration//GEN-END:variables
}
